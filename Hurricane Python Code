# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def bm_to_float(damages_list):
  float_damages = []
  for damage_entry in damages_list:
    if "not"  in damage_entry.lower():
      update = damage_entry
    else:
      number = float(damage_entry[:-1])
      suffix = damage_entry[-1]
      update = number * conversion[suffix]
    float_damages.append(update)
  return float_damages

# test function by updating damages
float_damages = bm_to_float(damages)

# 2 
# Create a Table
def array7dictionary1to1(key_array, array1, name1, a2, n2, a3, n3, a4, n4, a5, n5, a6, n6, a7, n7):
  keys = [name1, n2, n3, n4, n5, n6, n7]
  arrays = [array1, a2, a3, a4, a5, a6, a7]
  values = [{p:q for p,q in zip(keys, [arrays[j][i] for j in range(7)])} for i in range(len(key_array))]
  return {m:n for m, n in zip(key_array, values)}
  
# Create and view the hurricanes dictionary
hur_d = (array7dictionary1to1(names, names, "Name", months, "Month", years, "Year", max_sustained_winds, "Max Sustained Wind", areas_affected, "Areas Affected", float_damages, "Damage", deaths, "Deaths"))
print("Hurricane Dictionary:"), print(hur_d), print("")

# 3
# Organizing by Year
def dictionary1to1_to_onto(dict1to1, key_name):
  values = [i for i in dict1to1.values()]
  keys = [values[i][key_name] for i in range(len(values))]
  set_keys = sorted(set(keys))
  dict_onto = {}
  for i in range(len(set_keys)):
    value_multiple_entry = []
    for j in range(len(keys)):
      if set_keys[i] == keys[j]:
        value_multiple_entry.append(values[j])
    dict_onto[set_keys[i]] = value_multiple_entry
  return dict_onto
# create a new dictionary of hurricanes with year and key
hurricanes_by_year = dictionary1to1_to_onto(hur_d, "Year")
print("Hurricanes by Year:"), print(hurricanes_by_year), print("")

# 4
# Counting Damaged Areas

def d_of_d_element_tally(d_of_d, element_type):
  element_tally = {}
  for i in d_of_d:
    elements = d_of_d[i][element_type]
    for j in elements:
      value = element_tally.get(j.title(), 0)
      value +=1
      element_tally[j.title()] = value
  return element_tally 

# create dictionary of areas to store the number of hurricanes involved in
affected_area_d = d_of_d_element_tally(hur_d, "Areas Affected")
print("Affected Area Dictionary:"),print(affected_area_d),print("")
# 5 
# Calculating Maximum Hurricane Count
def d_max_value(d):
  d_reverse = {q:p for p,q in d.items() if not "D" in str(q)}
  max_value = max(d_reverse)
  max_key = d_reverse[max_value]
  return [max_key, max_value]
# find most frequently affected area and the number of hurricanes involved in
max_hurricane_area = d_max_value(affected_area_d)
print("{}, the most affected area, suffered {} hurricanes.".format(max_hurricane_area[0], max_hurricane_area[1])), print("")

# 6
# Calculating the Deadliest Hurricane
def elementN_d_from_d_of_d(d_of_d, elementN):
  elementN_d = {}
  for i in d_of_d:
    elementN_d[i] = d_of_d[i][elementN]
  return elementN_d
def d_of_d_max_value(d_of_d, elementN):
  return d_max_value(elementN_d_from_d_of_d(d_of_d, elementN))
# find highest mortality hurricane and the number of deaths
hurri_mort_max = d_of_d_max_value(hur_d, "Deaths")
print("{}, the highest mortality hurricane, caused {} deaths.".format(hurri_mort_max[0], hurri_mort_max[1])), print("")
# 7
# Rating Hurricanes by Mortality
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

def value_to_scale(value, scale):
  scale_value = 0
  if "D" in str(value): return 0
  if value > scale[max(scale)]: 
    return max(scale)+1
  while value > scale[scale_value]:
    scale_value += 1
  return scale_value
      
    

# categorize hurricanes in new dictionary with mortality severity as key
def d_of_d_transform_by_scale_key(d_of_d, value_type, scale):
  scale_d_of_d = {}
  scale_d_of_d[0] = []
  for i in scale:
    scale_d_of_d[i+1] = []
  for i in d_of_d:
    d = d_of_d[i]
    value = d[value_type]
    scale_value = value_to_scale(value, scale)
    scale_d_of_d[scale_value].append(d)
  return scale_d_of_d

mort_scale_d_of_d = d_of_d_transform_by_scale_key(hur_d, "Deaths", mortality_scale)
print("Mortality Scale Hurricane Dictionary:"), print(""),print(mort_scale_d_of_d)
# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost
hur_damage_max = d_of_d_max_value(hur_d, "Damage")
print("{}, the highest damages hurricane, caused ${} damage.".format(hur_damage_max[0], hur_damage_max[1])), print("")

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
damage_scale_d_of_d = d_of_d_transform_by_scale_key(hur_d, "Damage", damage_scale)
print("Damage Scale Hurricane Dictionary:"), print(""), print(damage_scale_d_of_d)
